
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author wowiee
 */
public class shopping extends javax.swing.JFrame {
    // Please change the filepath when using it yourself
String filepath = "/home/wowiee/Desktop/School/Sem 5/java/JavaAssignment/src/main/java/items.txt";
String cartfile = "/home/wowiee/Desktop/School/Sem 5/java/JavaAssignment/src/main/java/cart.txt";

    /**
     * Creates new form shopping
     */
    public shopping() {
        initComponents();
        // Loading items from the txt file
        File file = new File(filepath);
        try {
            // getting column names from txt file
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstline = br.readLine().trim();
            String[] columnname = firstline.split(",");
            DefaultTableModel model = (DefaultTableModel)itemtable.getModel();
            model.setColumnIdentifiers(columnname);
            model.setRowCount(0);
            
            Object[] tableLines = br.lines().toArray();
            
            // adding lines from txt file to the table
            for(int i = 0; i < tableLines.length; i++) {
                String line = tableLines[i].toString().trim();
                String[] row = line.split("/");
                model.addRow(row);
            }
        } 
        catch (FileNotFoundException ex) {
            Logger.getLogger(manageitems.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(manageitems.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        shoppingcart = new javax.swing.JTable();
        checkout = new javax.swing.JButton();
        addcart = new javax.swing.JButton();
        deletecart = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        itemtable = new javax.swing.JTable();
        loaditem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel.setText("Shopping Page");

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("List of items in store");

        shoppingcart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(shoppingcart);

        checkout.setText("Proceed to Checkout");
        checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutActionPerformed(evt);
            }
        });

        addcart.setText("Add to cart");
        addcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcartActionPerformed(evt);
            }
        });

        deletecart.setText("Delete from cart");
        deletecart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletecartActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Shopping Cart");

        itemtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Price", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(itemtable);

        loaditem.setText("Load Items");
        loaditem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loaditemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(581, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addcart, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(loaditem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(deletecart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2))))
                        .addGap(49, 49, 49))))
            .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1089, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deletecart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addcart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loaditem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcartActionPerformed
        // get values of selected row
        if (itemtable.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select an item to add!");
        }
        else {
            // subtract one from the selected item
            DefaultTableModel model = (DefaultTableModel)itemtable.getModel();
            int row = itemtable.getSelectedRow();
            int quantity = Integer.parseInt(String.valueOf(itemtable.getValueAt(row, 2)));
            model.setValueAt(quantity - 1, row, 2);
            
            // add the item into the cart array
            String[] cartlist = {String.valueOf(itemtable.getValueAt(row, 1)), String.valueOf(itemtable.getValueAt(row, 3)), ""};
            cartlist[2] = "1";
            System.out.print(Arrays.toString(cartlist));
            
            // add the item into the cart table
            DefaultTableModel cart = (DefaultTableModel)shoppingcart.getModel();
            // cart.addRow(cartlist); 
            
            // check if item already exists in cart
            if (shoppingcart.getRowCount() != 0) {
                for (int i = 0; i < shoppingcart.getRowCount(); i++) {
                    if (cartlist[0] == shoppingcart.getValueAt(i,0)) {
                        String cartquantity = String.valueOf(shoppingcart.getValueAt(i,2));
                        shoppingcart.setValueAt(Integer.parseInt(cartquantity) + 1, i, 2);
                    }
                    else {
                        cart.addRow(cartlist);
                    }
                }
            }
            else {
                cart.addRow(cartlist);
            }
        }
    }//GEN-LAST:event_addcartActionPerformed

    private void loaditemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loaditemActionPerformed
        File file = new File(filepath);

        try {
            // getting column names from txt file
            BufferedReader br = new BufferedReader(new FileReader(file));
            String firstline = br.readLine().trim();
            String[] columnname = firstline.split(",");
            DefaultTableModel model = (DefaultTableModel)itemtable.getModel();
            model.setColumnIdentifiers(columnname);
            model.setRowCount(0);

            Object[] tableLines = br.lines().toArray();

            // adding lines from txt file to the table
            for(int i = 0; i < tableLines.length; i++) {
                String line = tableLines[i].toString().trim();
                String[] row = line.split("/");
                model.addRow(row);
            }
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(manageitems.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(manageitems.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_loaditemActionPerformed

    private void checkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutActionPerformed
        // add the selected item into the cart
        /*try {
            PrintWriter cart = new PrintWriter(cartfile);  
            for (int x = 0; x < itemtable.getColumnCount(); x++) {
                cart.write(String.valueOf(itemtable.getValueAt(row, x)));
                cart.write("/");
            }
            cart.write(System.getProperty("line.separator"));
            cart.close();
            }
            catch(Exception e) {
            JOptionPane.showMessageDialog(null, "There was a problem!");
        } */
        // write updated stock into the file
        /*try {
        PrintWriter writer = new PrintWriter(filepath);
        // write column names
        writer.write("ID,Name,Quantity,Price,Category");
        writer.write(System.getProperty("line.separator"));
        // loop through every row
        for (int i = 0; i < itemtable.getRowCount(); i++) {
        // loop through every column in that row
        for (int v = 0; v < itemtable.getColumnCount(); v++) {
            // get value of cell in table and write it into file
             String value = String.valueOf(itemtable.getValueAt(i,v));
             writer.write(value);
             writer.write("/");
        }
        writer.write(System.getProperty("line.separator"));
    }
        writer.close();

   }
    catch(Exception e) {
        JOptionPane.showMessageDialog(null, "There was a problem!");
    }*/
    }//GEN-LAST:event_checkoutActionPerformed

    private void deletecartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletecartActionPerformed
        // get values of selected row
        if (shoppingcart.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select an item to delete!");
        }
        else {
            // subtract one from the selected item
            DefaultTableModel model = (DefaultTableModel)itemtable.getModel();
            int row = shoppingcart.getSelectedRow();
            int itemrow = 0;
            
            for (int i = 0; i < itemtable.getRowCount(); i++) {
                if (itemtable.getValueAt(i, 1) == shoppingcart.getValueAt(row,0)) {
                    itemrow = i;
                }
            }
            int quantity = Integer.parseInt(String.valueOf(itemtable.getValueAt(itemrow, 2)));
            model.setValueAt(quantity + 1, itemrow, 2);
            
            // add the item into the cart table
            DefaultTableModel cart = (DefaultTableModel)shoppingcart.getModel();
            int quantitycart = (Integer.parseInt(String.valueOf(shoppingcart.getValueAt(row,2))));
            // I dunno why but it only works when I put 2 lol
            if (quantitycart < 2) {
                cart.removeRow(row);
            }
            else {
                cart.setValueAt((quantitycart - 1), row, 2); 
            }
        }
    }//GEN-LAST:event_deletecartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(shopping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(shopping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(shopping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(shopping.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new shopping().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addcart;
    private javax.swing.JButton checkout;
    private javax.swing.JButton deletecart;
    private javax.swing.JTable itemtable;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton loaditem;
    private javax.swing.JTable shoppingcart;
    // End of variables declaration//GEN-END:variables
}
